<?php

/**
 * Implements hook_permission().
 */
function bugcatchlog_permission() {
  return array(
    'config bugcatchlog' => array(
      'title' => t('Configure BugCatch.'),
      'description' => t('Configure access to Bug Catch service.'),
    ),
  );
}

/**
 * Implements hook_menu().
 */
function bugcatchlog_menu() {
  return array(
    'admin/config/development/bugcatchlog' => array(
      'title' => 'BugCatch Logging',
      'description' => 'Configure access to Bug Catch log service.',
      'access arguments' => array('config bugcatchlog'),
      'page callback' => 'drupal_get_form',
      'page arguments' => array('bugcatchlog_config_form'),
      'file' => 'bugcatchlog.pages.inc',
    ),
  );
}

/**
 * Utility function to read module configuration.
 */
function bugcatchlog_config($var) {
  $defaults = array(
    'service_url' => 'https://bugcatches.com/app_api.php/api/errors.json',
    'service_key' => '',
  );
  if (!isset($defaults[$var])) {
    return NULL;
  }
  return variable_get("bugcatchlog_$var", $defaults[$var]);
}

/**
 * Implements hook_watchdog().
 */
function bugcatchlog_watchdog($log_entry) {
  // TODO: This sould have queue support
  // Get Service data
  $url = bugcatchlog_config('service_url');
  $api_key = bugcatchlog_config('service_key');
  if (!$url || !$api_key) {
    return;
  }
  // Error handler
  $client = new CULabs\BugCatch\Client\Client($url, $api_key);
  $handler = new CULabs\BugCatch\ErrorHandler\ErrorHandler($client, TRUE);
  // Build user data
  $user_data = bugcatchlog_user_data($log_entry['uid'], $log_entry['user']);
  $user_data['ip'] = $log_entry['ip'];
  $handler->setUserData($user_data);
  // Encode errors
  $exception = bugcatchlog_build_exception($log_entry);
  // Send request
  $handler->notifyException($exception);
}

/**
 * Build user data.
 */
function bugcatchlog_user_data($uid, $account) {
  $valid = !empty($account) && is_object($account);
  return array(
    'uid' => $uid,
    'name' => !empty($account->name) ? $account->name : '',
    'formatted_name' => format_username($account),
  );
}

/**
 * Build an ErrorException from log entry.
 */
function bugcatchlog_encode_errors($log_entry) {
  $errors = array();
  $var = $log_entry['variables'];
  // Drupal error log expected keys
  $error_log_keys = array(
    '%type',
    '!message',
    '%function',
    '%file',
    '%line',
    'severity_level',
  );
  $diff = array_diff($error_log_keys, array_keys($var));
  // If this is a system error log
  if (empty($diff)) {
    $file = drupal_realpath($var['%file']);
    return new ErrorException($var['!message'], 0, $var['severity_level'], $file, $var['%line']);
  }
  // Log watchdog message
  $message = format_string($log_entry['message'], $var);
  if (!empty($log_entry['link'])) {
    $message .= " [{$log_entry['link']}]";
  }
  $message = drupal_html_to_text($message);
  return new ErrorException($message, 0, $var['severity_level']);
}
